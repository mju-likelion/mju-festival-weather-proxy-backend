# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI/CD with Gradle

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  # Spring Boot 애플리케이션을 빌드하여 도커허브에 푸시하는 과정
  build-docker-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Grant execute permission for gradlew # gradlew 파일에 실행 권한 부여
        run: chmod +x gradlew # gradlew 파일에 실행 권한을 부여한다.

      # 1. Java 17 세팅
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 2. Spring Boot 애플리케이션 빌드
      - name: Build with Gradle
        uses: gradle/gradle-build-action@bd5760595778326ba7f1441bcf7e88b49de61a25 # v2.6.0
        with:
          arguments: clean bootJar -x test

      # 3. Docker 이미지 빌드
      - name: docker image build
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_IMAGE }} .

      # 4. DockerHub 로그인
      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # 5. Docker Hub 이미지 푸시
      - name: docker Hub push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_IMAGE }}

  # Docker 이미지를 가져와서 AWS EC2 에 배포하는 과정
  deploy:
    needs: build-docker-image
    runs-on: ubuntu-latest
    steps:
      - name: set application-prod.properties
        run: |
          mkdir -p ~/properties/prod
          cd ~/properties/prod
          touch ./application-prod.properties
          echo "${{ secrets.PROPERTIES }}" > ./application-prod.properties
        shell: bash

      - name: ssh connect & production
        uses: appleboy/ssh-action@master
        with:
          host: ${{secrets.HOST}}
          username: ${{secrets.USERNAME}}
          key: ${{secrets.PASSWORD}}
          script: |
            sudo docker login --username ${{secrets.DOCKERHUB_USERNAME}} --password ${{secrets.DOCKERHUB_PASSWORD}}
            sudo docker pull ${{secrets.DOCKERHUB_USERNAME}}/${{secrets.DOCKERHUB_IMAGE}}
            sudo docker ps -q | xargs -r sudo docker stop
            sudo docker ps -aq | xargs -r sudo docker rm
            sudo docker run --name ${{secrets.DOCKERHUB_IMAGE}} -d -p 8080:8080 -v ~/properties:/properties -e SPRING_PROFILES_ACTIVE=prod -e SPRING_CONFIG_LOCATION=/properties/prod/application-prod.properties ${{secrets.DOCKERHUB_USERNAME}}/${{secrets.DOCKERHUB_IMAGE}}
            sudo docker system prune -f
            
            
            
            
            
  
  
  
  
  
  
  
  
